{
	"info": {
		"_postman_id": "e62eb708-350e-42bc-a001-59505a4f195b",
		"name": "Feature",
		"description": "Тестирование комментариев",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45474735",
		"_collection_link": "https://saida-9986029.postman.co/workspace/Saida's-Workspace~b947e965-a09b-47fc-8002-18e6db3a3fa3/collection/45474735-e62eb708-350e-42bc-a001-59505a4f195b?action=share&source=collection_link&creator=45474735"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Удаление комментария администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Тело ответа должно быть пустым\", function () {",
									"    pm.response.to.have.body('');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const prepareAdminTest = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"    ",
									"    try {",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        ",
									"        const commentData = {",
									"            text: \"Комментарий для тестирования удаления администратором\"",
									"        };",
									"        ",
									"        const comment = await api.post(",
									"            `/users/${user.id}/comments/${event.id}`, ",
									"            commentData, ",
									"            pm.collectionVariables.get(\"baseUrl\")",
									"        );",
									"        ",
									"        pm.collectionVariables.set(\"adminCommentId\", comment.id);",
									"        console.log(\"Создан комментарий для удаления администратором:\", comment.id);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке комментария:\", err);",
									"    }",
									"};",
									"",
									"prepareAdminTest();"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{adminCommentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{adminCommentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Private",
			"item": [
				{
					"name": "Создание комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const prepareCommentTest = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"    ",
									"    try {",
									"        // Создаем пользователя и событие",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
									"        event = await api.publishEvent(event.id);",
									"        ",
									"        // Сохраняем ID для использования в тестах",
									"        pm.collectionVariables.set(\"userId\", user.id);",
									"        pm.collectionVariables.set(\"eventId\", event.id);",
									"        ",
									"        // Подготавливаем данные комментария",
									"        const commentData = {",
									"            text: \"Комментарий к событию.\"",
									"        };",
									"        ",
									"        pm.request.body.update({",
									"            mode: 'raw',",
									"            raw: JSON.stringify(commentData),",
									"            options: { raw: { language: 'json' } }",
									"        });",
									"        ",
									"        console.log(\"Подготовлены данные для создания комментария:\", commentData);",
									"        ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке данных:\", err);",
									"    }",
									"};",
									"",
									"prepareCommentTest();"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка успешного создания комментария",
									"pm.test(\"Статус код должен быть 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Ответ должен содержать поля комментария\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('text');",
									"    pm.expect(response).to.have.property('userId');",
									"    pm.expect(response).to.have.property('eventId');",
									"    pm.expect(response).to.have.property('createdDate');",
									"    ",
									"    // Сохраняем ID комментария для дальнейших тестов",
									"    pm.collectionVariables.set(\"commentId\", response.id);",
									"});",
									"",
									"pm.test(\"Текст комментария должен совпадать с отправленным\", function () {",
									"    const response = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.text).to.equal(requestBody.text);",
									"});",
									"",
									"pm.test(\"ID события должны совпадать с отправленным\", function () {",
									"    const response = pm.response.json();",
									"    const eventId = pm.collectionVariables.get(\"eventId\");",
									"    pm.expect(response.eventId).to.equal(parseInt(eventId));",
									"});",
									"",
									"pm.test(\"ID пользователя должны совпадать с отправленным\", function () {",
									"    const response = pm.response.json();",
									"    const userId = pm.collectionVariables.get(\"userId\");",
									"    pm.expect(response.userId).to.equal(parseInt(userId));",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\": \"Новый комментарий\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание слишком длинного комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Создаем комментарий длиннее 5000 символов",
									"const longText = 'a'.repeat(5001);",
									"const invalidComment = {",
									"    text: longText",
									"};",
									"",
									"pm.request.body.update({",
									"    mode: 'raw',",
									"    raw: JSON.stringify(invalidComment),",
									"    options: { raw: { language: 'json' } }",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код должен быть 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\": \"a\".repeat(5001)}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание пустого комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const emptyComment = {",
									"    text: \"\"",
									"};",
									"",
									"pm.request.body.update({",
									"    mode: 'raw',",
									"    raw: JSON.stringify(emptyComment),",
									"    options: { raw: { language: 'json' } }",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код должен быть 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\": \"\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код должен быть 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"В ответе должен быть список комментариев пользователя\", function () {",
									"    const response = pm.response.json();",
									"    const userId = pm.collectionVariables.get(\"userId\");",
									"    ",
									"    pm.expect(response).to.be.an('array');",
									"    ",
									"    response.forEach(comment => {",
									"        pm.expect(comment.userId).to.equal(parseInt(userId));",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const updateData = {",
									"    text: \"Обновленный текст комментария\"",
									"};",
									"",
									"pm.request.body.update({",
									"    mode: 'raw',",
									"    raw: JSON.stringify(updateData),",
									"    options: { raw: { language: 'json' } }",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код должен быть 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Текст комментария должен быть обновленный\", function () {",
									"    const response = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(response.text).to.equal(requestBody.text);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"text\": \"Обновленный текст комментария\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код должен быть 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Тело ответа должно быть пустым\", function () {",
									"    pm.response.to.have.body('');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Public",
			"item": [
				{
					"name": "Получение комментариев события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус код должен быть 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"В ответе должен быть список комментариев\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Комментарии должны относиться к определенному событию\", function () {",
									"    const response = pm.response.json();",
									"    const eventId = pm.collectionVariables.get(\"eventId\");",
									"    ",
									"    response.forEach(comment => {",
									"        pm.expect(comment.eventId).to.equal(parseInt(eventId));",
									"    });",
									"});",
									"",
									"pm.test(\"Комментарии должны быть отсортированы по дате создания\", function () {",
									"    const response = pm.response.json();",
									"    if (response.length > 1) {",
									"        const firstDate = new Date(response[0].createdDate);",
									"        const secondDate = new Date(response[1].createdDate);",
									"        pm.expect(firstDate.getTime()).to.be.greaterThan(secondDate.getTime());",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const prepareCommentTest = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    \r",
									"    try {\r",
									"        // Создаем пользователя и событие\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const comment = await api.addComment(user.id, event.id, rnd.getComment());  \r",
									"        // Сохраняем ID для использования в тестах\r",
									"        pm.collectionVariables.set(\"userId\", user.id);\r",
									"        pm.collectionVariables.set(\"eventId\", event.id);\r",
									"        \r",
									"        console.log(\"Подготовлены данные для создания комментария:\", comment);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке данных:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"prepareCommentTest();"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/event/{{eventId}}?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"event",
								"{{eventId}}"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"// Класс для работы с API комментариев",
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comments/\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            ",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошибка.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    ",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: \"Событие для проверки комментариев\",",
					"            category: categoryId,",
					"            description: \"Описание события для проверки комментариев\",",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: 55.5555,",
					"                lon: 44.4444,",
					"            },",
					"            paid: false,",
					"            participantLimit: 0,",
					"            requestModeration: false,",
					"            title: \"Событие для проверки комментариев\",",
					"        }",
					"    }",
					"    ",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "adminCommentId",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		}
	]
}